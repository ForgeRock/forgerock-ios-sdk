// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AuthenticatorBluetooth
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AuthenticatorBluetooth
import CoreBluetooth
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warn
  case error
  case off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Logger {
  func log(_ message: Swift.String, _ logLevel: AuthenticatorBluetooth.LogLevel)
}
@_hasMissingDesignatedInitializers public class BluetoothAuthenticator {
  public static let shared: AuthenticatorBluetooth.BluetoothAuthenticator
  final public let bluetoothManager: any AuthenticatorBluetooth.BluetoothManager
  public var logger: (any AuthenticatorBluetooth.Logger)? {
    get
    set
  }
  @objc deinit
}
public protocol BluetoothManager : AnyObject {
  var delegate: (any AuthenticatorBluetooth.BluetoothManagerDelegate)? { get set }
  func refreshScanning()
  func approve(deviceId: Swift.String, publicKey: Swift.String, encryptedPasswords: [Swift.String], passwords: [Swift.String])
  func approveV2(deviceId: Swift.String, publicKey: Swift.String, encryptedPasswords: [Swift.String])
  func approveAAL3(deviceId: Swift.String, publicKey: Swift.String, signature: Foundation.Data)
  func deny(deviceId: Swift.String, publicKey: Swift.String)
  func ignore(deviceId: Swift.String)
  func getAal3ChallengeForDeviceId(deviceId: Swift.String) -> Foundation.Data?
}
public protocol BluetoothManagerDelegate : AnyObject {
  func deviceIdsForBluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager) -> [Swift.String]
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didDiscoverDeviceWithId deviceId: Swift.String)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, shouldConnectToDeviceWithId deviceId: Swift.String) -> Swift.Bool
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didRequestAuthenticationForDeviceWithId deviceId: Swift.String, message: Swift.String?)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didRequestAal3AuthenticationForDeviceWithId deviceId: Swift.String, enrollmentId: Swift.String)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didSendAuthenticationToDeviceWithId deviceId: Swift.String)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didFinishConnectionToDeviceWithId deviceId: Swift.String)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didFailConnectionToDeviceWithId deviceId: Swift.String)
  func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didDisconnectFromDeviceWithId deviceId: Swift.String)
}
extension AuthenticatorBluetooth.BluetoothManagerDelegate {
  public func bluetoothManager(_ manager: any AuthenticatorBluetooth.BluetoothManager, didRequestAal3AuthenticationForDeviceWithId deviceId: Swift.String, enrollmentId: Swift.String)
}
extension AuthenticatorBluetooth.LogLevel : Swift.Equatable {}
extension AuthenticatorBluetooth.LogLevel : Swift.Hashable {}
extension AuthenticatorBluetooth.LogLevel : Swift.RawRepresentable {}
